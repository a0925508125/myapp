version: '3.8'

services:
  gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENTER_PATH: "service/gateway"
        APP_NAME: "gateway"
        EXPOSE_PORT: 8080
    container_name: gateway
    ports:
      - "8080:8080"
    environment:
      MYSQL_DSN: "root:root@tcp(mysql:3306)/shop?parseTime=true"
      REDIS_ADDR: "redis:6379"        # 改成 redis container hostname
      KAFKA_BROKERS: "kafka:29092"    # 連 Kafka container
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
    depends_on:
      - transaction

  transaction:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENTER_PATH: "service/transaction"
        APP_NAME: "transaction"
        EXPOSE_PORT: 8090
    container_name: transaction
    ports:
      - "8090:8090"
    environment:
      MYSQL_DSN: "root:root@tcp(mysql:3306)/shop?parseTime=true"
      REDIS_ADDR: "redis:6379"
    depends_on:
      - mysql
      - redis

  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka
    ports:
      - "9092:9092"  # client
      - "29092:29092" # 給其他 container 用
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,DOCKER://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKER://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - E:/go/docker-data/kafka:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: localhost:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: ""
    ports:
      - "8081:8080"
    depends_on:
      - kafka

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: shop
    ports:
      - "3306:3306"
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - E:/go/docker-data/mysql:/var/lib/mysql

  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - E:/go/docker-data/redis:/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.6
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - network.host=0.0.0.0   # 允許外部連線
    ports:
      - "9200:9200"
    volumes:
      - E:/go/docker-data/elasticsearch:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.6
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"


networks:
  default: # 這樣定義，docker-compose 會自動創建
    driver: bridge  # 使用 bridge 來確保容器在同一網路
